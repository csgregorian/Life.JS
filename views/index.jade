extends layout

block head
  link(rel="stylesheet" type="text/css" href="index.css")
  title GameOfLifeJS

block content
  div
    canvas#c(width=640 height=640)

  div.generation Generation 
    span#generation 1

  div.button-container
    a
      div.button#evolve Evolve
    a
      div.button#reset Rebirth
    a
      div.button#auto Automate




  //- JAVASCRIPT STARTS HERE
  script.
    //- Eliminates residual JQuery Mobile element
    $.mobile.loading().remove();

    //- Prefixing for vibration on mobile
    navigator.vibrate = navigator.vibrate ||
                        navigator.webkitVibrate ||
                        navigator.mozVibrate ||
                        navigator.msVibrate;

    var cv = document.getElementById('c');
    var c = cv.getContext("2d");

    var grid = new Array(64);
    for (var i = 0; i < 64; i++) {
      grid[i] = new Array(64);
    }

    var draw = function() {
      c.fillStyle = "#DDDDDD";
      c.fillRect(0, 0, 640, 640);
      c.fillStyle = "#000000";
      for (var i = 0; i < 64; i++) {
        c.fillRect(i*10, 0, 1, 640);
        c.fillRect(0, i*10, 640, 1);
      }

      for (var x = 0; x < 64; x++) {
        for (var y = 0; y < 64; y++) {
          if (grid[x][y]) {
            c.fillRect(x*10, y*10, 10, 10);
          }
        }
      }
    }

    function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
          x: Math.floor((evt.clientX - rect.left)/10),
          y: Math.floor((evt.clientY - rect.top)/10)
        };
    }

    function getTouchPos(evt) {
      evt = evt.originalEvent;
      var touch = evt.touches[0];

      return {
        x: Math.floor(touch.pageX/10),
        y: Math.floor(touch.pageY/10)
      };
    }

    draw();

    var pos = {x:0, y:0};
    var mouse_down = false;
    var fill = false;
    var generation = 0;

    $("canvas").mousedown(function(e) {
      pos = getMousePos(cv, e);
      mouse_down = true;

      if (grid[pos.x][pos.y]) {
        grid[pos.x][pos.y] = false;
        fill = false;
      } else {
        grid[pos.x][pos.y] = true;
        fill = true;
      }

      socket.emit("toggle", pos);
      draw();
    });

    $("canvas").mouseup(function(e) {
      mouse_down = false;
    });


    $("canvas").mousemove(function(e) {
      if (!mouse_down) {
        return;
      }

      pos = getMousePos(cv, e);

      if (fill) {
        if (!grid[pos.x][pos.y]) {
          grid[pos.x][pos.y] = true;
          socket.emit("toggle", pos);
          draw();
        }
      } else if (!fill) {
        if (grid[pos.x][pos.y]) {
          grid[pos.x][pos.y] = false;
          socket.emit("toggle", pos);
          draw();
        }
      }
    });

    $(document).on("touchstart", function(e) {
      pos = getTouchPos(e);

      mouse_down = true;

      if (grid[pos.x][pos.y]) {
        grid[pos.x][pos.y] = false;
        fill = false;
      } else {
        grid[pos.x][pos.y] = true;
        fill = true;
      }

      socket.emit("toggle", pos);
      draw();
    });

    $(document).on("touchend", function (e) {
      mouse_down = false;
    }); 

    $(document).on("touchmove", function(e) {
      pos = getTouchPos(e);

      if (!mouse_down) {
        return;
      }

      if (fill) {
        if (!grid[pos.x][pos.y]) {
          grid[pos.x][pos.y] = true;
          socket.emit("toggle", pos);
          draw();
        }
      } else if (!fill) {
        if (grid[pos.x][pos.y]) {
          grid[pos.x][pos.y] = false;
          socket.emit("toggle", pos);
          draw();
        }
      }
    });


    $(".button").mousedown(function(e) {
      navigator.vibrate(10);
    });

    $("#evolve").click(function(e) {
      socket.emit("update");
    });

    $("#reset").click(function(e) {
      if (window.confirm("Are you sure you want to reset?"))
        socket.emit("reset");
        generation = 0;
    });

    $("#auto").click(function(e) {
      socket.emit("auto");
    });

    socket.on("toggle", function(coord) {
      grid[coord.x][coord.y] = !grid[coord.x][coord.y];
      draw();
    });

    socket.on("update", function(board) {
      grid = board;
      generation++;
      $("#generation").html(generation);
      draw();
    });

    socket.on("auto", function(is_auto) {
      console.log("auto");
      if (is_auto) {
        $("#auto").css({"background-color": "#000000"});
      } else {
        $("#auto").css({"background-color": "#333333"});
      }
    });

    //- Debug
    //- window.onerror = function(err) {alert(err);}
